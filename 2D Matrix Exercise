#include <stdio.h>
#include <stdlib.h>

// Función para llenar una matriz con datos del usuario
void fillMatrix(int *matrix, int rows, int cols, char name) {
    printf("Ingresa los elementos de la matriz %c:\n", name);
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%c[%d][%d] = ", name, i, j);
            scanf("%d", (matrix + i * cols + j)); // aritmética de punteros
        }
    }
}

// Función para sumar dos matrices y guardar el resultado en una tercera
void addMatrices(int *A, int *B, int *C, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            *(C + i * cols + j) = *(A + i * cols + j) + *(B + i * cols + j);
        }
    }
}

// Función para imprimir una matriz
void printMatrix(int *matrix, int rows, int cols, char name) {
    printf("Matriz %c:\n", name);
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d\t", *(matrix + i * cols + j));
        }
        printf("\n");
    }
}

int main() {
    int rows, cols;

    // Solicita al usuario el tamaño de las matrices
    printf("Número de filas: ");
    scanf("%d", &rows);
    printf("Número de columnas: ");
    scanf("%d", &cols);

    // Reserva memoria dinámica para las tres matrices
    int *A = (int *)malloc(rows * cols * sizeof(int));
    int *B = (int *)malloc(rows * cols * sizeof(int));
    int *C = (int *)malloc(rows * cols * sizeof(int));

    // Verifica que la memoria fue asignada correctamente
    if (A == NULL || B == NULL || C == NULL) {
        printf("Error al asignar memoria.\n");
        return 1;
    }

    // Llenar matrices A y B
    fillMatrix(A, rows, cols, 'A');
    fillMatrix(B, rows, cols, 'B');

    // Sumar matrices
    addMatrices(A, B, C, rows, cols);

    // Imprimir resultados
    printMatrix(A, rows, cols, 'A');
    printMatrix(B, rows, cols, 'B');
    printMatrix(C, rows, cols, 'C');

    // Liberar memoria
    free(A);
    free(B);
    free(C);

    return 0;
}

